//zonal RFID card

#include <msp430.h>
#include <math.h>
#include <Library/LunchboxCommon.h>
#include <stdio.h>
#include <string.h>
#include <inttypes.h>
#include "lcd.h"


#define Hospital 0
#define School 0

#define SW  3
#define M1P 0
#define M1N 1
#define M2P 2
#define M2N 3
#define cardlimit 12
#define led 7
unsigned char val=0;





//const int CardNum[Hospital][12] ={'0','2','0','0','6','8','7','9','B','4','A','7'};
//const int CardNum[School][12] ={'0','2','0','0','6','8','A','A','B','C','7','C'};
//const int CardNum[Hospital][12] ={'0','2','0','0','6','8','7','9','B','4','A','7'}

unsigned char card_num_count=0,card_num[13],printed=1;
volatile unsigned int Total_speed;
void read_card();
char read_ch();

void send_ch(char ch);
void change_speed(unsigned int speed);

/**
 * @brief
 * These settings are wrt enabling uart on Lunchbox
 **/
void register_settings_for_UART()
{

    P1SEL = BIT1 + BIT2;              // Select UART RX/TX function on P1.1,P1.2
    P1SEL2 = BIT1 + BIT2;

    P1DIR &= ~(1 << SW);
    P2DIR |= (1 << M1P) | (1 << M2P) | (1 << M1N) | (1 << M2N);
    P2DIR &= ~((1 << M1P) | (1 << M2P) | (1 << M1N) | (1 << M2N));
    UCA0CTL1 |= UCSSEL_1;               // UART Clock -> ACLK
    UCA0BR0 = 3;                        // Baud Rate Setting for 32kHz 9600
    UCA0BR1 = 0;                        // Baud Rate Setting for 32kHz 9600
    UCA0MCTL = UCBRF_0 + UCBRS_3;       // Modulation Setting for 32kHz 9600
    UCA0CTL1 &= ~UCSWRST;               // Initialize UART Module
    IE2 |= UCA0RXIE;                    // Enable RX interrupt

}

/**
 * main.c
 */
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    volatile unsigned int run = 0;
    P1DIR |= (1 << led);
    P1OUT &= ~(1 << led);
    P1DIR &= ~(1 << SW);
    P1OUT |= (1 << SW);
    register_settings_for_UART();
    lcd_init();                     // Initialising LCD

    __delay_cycles(1000);
    send_ch("K");
     P1OUT |= (1 << led);
     delay_ms(100);

     delay_ms(100);

     P1OUT &= ~(1 << led);
     delay_ms(100);

     lcd_clr();
     lcd_setCursor(0,1);             // Cursor position (0,1)
     lcd_print("Hello Embedded");    // Print

     lcd_setCursor(1,5);             // Cursor position (1,3)
     lcd_print("Systems!");          // Print

    while(1)
    {
        P1OUT |= (1 << led);
             read_card();

             P1OUT &= ~(1 << led);
             delay_ms(100);
             print_card();

             if(card_num[6] == '5')
             {
                    //P2OUT |= (1 << M1P)|(1 << M2N);
                    //delay(10);
                    //P2OUT &= ~((1 << M1P)|(1 << M2N));
                    //delay(Total_speed-10);
                    //P1OUT |= (1 << led);
                    lcd_clr();
                    lcd_setCursor(0,1);             // Cursor position (0,1)
                    lcd_print("Ambulance");    // Print
                    //lcd_printNumber(val);
             }
             else if(card_num[6] == '3')
              {
                     //P2OUT |= (1 << M1P)|(1 << M2N);
                     //delay(10);
                     //P2OUT &= ~((1 << M1P)|(1 << M2N));
                     //delay(Total_speed-10);
                     //P1OUT |= (1 << led);
                     lcd_clr();
                     lcd_setCursor(0,1);             // Cursor position (0,1)
                     lcd_print("Theft vehicle");    // Print
              }
             else
             {
                 lcd_clr();
                 lcd_setCursor(0,1);             // Cursor position (0,1)
                 lcd_print("something is wrong");    // Print
                    //speed = 20;
                    //P1OUT &= ~(1 << led);
             }
             erase_card();
         //}


        /*if(printed == 0)
        {
            for(card_num_count=0;card_num_count<9;card_num_count++)
                {
                    send_ch(card_num[card_num_count]);
                }
            printed = 1;
            erase_card();
        }*/



//      ;
    }
    return 0;
}

void delay_ms(unsigned int speed)
{
    unsigned int x,y;
    for(x=0;x<speed;x++)
        __delay_cycles(10000);
}

void erase_card()
{
    volatile unsigned char count;
    for(count=0;count<=cardlimit;count++)
        card_num[card_num_count] = 0;
}

void print_card()
{
    volatile unsigned char count;
    for(count=0;count<=cardlimit;count++)
        send_ch(card_num[card_num_count]);
}
void read_card()
{
    card_num_count=0;
    while(card_num_count<=cardlimit)
            {
                card_num[card_num_count++] = read_ch();
                //card_num_count++;
            }
    printed = 0;
    //card_num_count=0;
}

char read_ch()
{
    char ch;
    while (!(UC0IFG & UCA0RXIFG));
    ch = UCA0RXBUF;          // TX -> Received Char
    UCA0RXBUF = 0;
    val++;
    //send_ch(ch);
    return ch;
}

void send_ch(char ch)
{
    while (!(IFG2&UCA0TXIFG));          // Check if TX is ongoing
    UCA0TXBUF = ch;          // TX -> Received Char

}


